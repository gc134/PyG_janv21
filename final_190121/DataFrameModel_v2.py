# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\gwcueff\Documents\Bioinfo\outils_perso\python_germination\PyG_interface_2\interface_v2_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt

class TableModel(QtCore.QAbstractTableModel):

    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):

        if role == Qt.DisplayRole:

            #get the raw value avec méthode pandas pour une tableau pandas en entrée, capturé par "self._data"

            value = self._data.iloc[index.row(), index.column()]

            # Perform per-type checks and render accordingly.

            # if isinstance(value, float):
            #     # Render float to 2 dp
            #     return "%.2f" % value

            # if isinstance(value, str):
            #     # Render strings with quotes
            #     return '%s' % value

            # Default (anything not captured above: e.g. int)
            return str(value)


        if role == Qt.TextAlignmentRole:

            value = self._data.iloc[index.row(), index.column()]
           
            # if isinstance(val, int) or isinstance(val, float) or isinstance(val, str):

            # Align center, vertical middle for all kind of data

            return Qt.AlignHCenter + Qt.AlignVCenter


        if role == Qt.BackgroundRole:

            value = self._data.iloc[index.row(), index.column()]           

            if isinstance(value, str):

                return QtGui.QColor("YellowGreen")

            elif isinstance(value, float):

                return QtGui.QColor("Gold")

            else :

                return QtGui.QColor("Gold")






    def rowCount(self, index):
        return self._data.shape[0]

    def columnCount(self, index):
        return self._data.shape[1]

    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])

            if orientation == Qt.Vertical:
                return str(self._data.index[section])




        